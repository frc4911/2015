package org.usfirst.frc.team4911.robot.subsystems;

import java.io.File;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.text.DecimalFormat;


import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc.team4911.robot.RobotConstants;

public class PrintSystem extends Subsystem {
	private int autoFileNum;
	private int teleFileNum;
	private PrintWriter fileWriter;
	
	private LinkedList<String> dataList;
	private int frequency;
	private int numIteration;
	
	public PrintSystem(){
		autoFileNum = 1;
		teleFileNum = 1;
		this.numIteration = 0;
		this.frequency = RobotConstants.printFrequency;
		this.dataList = new LinkedList<String>();
		resetIteration();
	}
	
    public void initDefaultCommand() {
        
    }
    
    public void createNewFile() {
    	if(DriverStation.getInstance().isAutonomous()) {
    		try {
    			if(autoFileNum >= 10) {
    				fileWriter = new PrintWriter(new File("/home/lvuser/natinst/autoLog" + (autoFileNum++) + ".txt"));
    			}
    			else {
    				fileWriter = new PrintWriter(new File("/home/lvuser/natinst/autoLog" + 0 + (autoFileNum++) + ".txt"));
    			}
    		} 
    		catch (FileNotFoundException e) {
    		}
    	}
    	else if(DriverStation.getInstance().isOperatorControl()) {
    		try {
    			if(teleFileNum >= 10) {
    				fileWriter = new PrintWriter(new File("/home/lvuser/natinst/teleLog" + (teleFileNum++) + ".txt"));
    			}
    			else {
    				fileWriter = new PrintWriter(new File("/home/lvuser/natinst/teleLog" + 0 + (teleFileNum++) + ".txt"));
    			}
    		}
        	catch(FileNotFoundException e) {
        	}
    	}
    }
    
    public void closeOutput() {
    	if(fileWriter != null) {
    		fileWriter.close();
    	}
    }
    
    public void resetIteration() {
    	numIteration = 0;
    	this.frequency = RobotConstants.printFrequency;
    }
    
    public void updatePrint(){
    	if(numIteration >= frequency) {
    		if(RobotConstants.FLAG){
    			System.out.println("===========================================");
    			System.out.println("Printed:\t" + Timer.getFPGATimestamp());
    		}	
    		fileWriter.println("===========================================");
    		fileWriter.println("Printed:\t" + Timer.getFPGATimestamp());
    		for(String data : dataList){
    			if(RobotConstants.FLAG){
        			System.out.println(data);
    			}
    			fileWriter.println(data);
    			}    	
    		if(RobotConstants.FLAG){
    			System.out.println("===========================================");
    		}
    		fileWriter.println("===========================================");
    		resetIteration();
    	} else {
    		numIteration++;
    	}
    }
    
    public void print(String label, Object val){
    	double time = Timer.getFPGATimestamp();
    	StackTraceElement[] st = Thread.currentThread().getStackTrace();
    	StackTraceElement e = st[2];//st.length - 5
    	dataList.add(new Data(e, time, label, val.toString()).toString());
    }
        
    private class Data {
    	public String className;
    	public int lineNumber;
    	public String methodName;
    	public String label;
    	public String value;
    	public String msg;
    	public double time;
    	
    	public Data(StackTraceElement t, double time, String label, String value){
    		this.label = label;
    		this.value = value;
    		this.time = time;
    		StringTokenizer tokenizer = new StringTokenizer(t.getClassName(),".");
    		while(tokenizer.hasMoreTokens()){
    			this.className = tokenizer.nextToken();
    		}
    		this.lineNumber = t.getLineNumber();
    		this.methodName = t.getMethodName();    		
    	}
    	public Data(StackTraceElement t, double time, String msg){
    		this.msg = msg;
    		this.time = time;
    		StringTokenizer tokenizer = new StringTokenizer(t.getClassName(),".");
    		while(tokenizer.hasMoreTokens()){
    			this.className = tokenizer.nextToken();
    		}
    		this.lineNumber = t.getLineNumber();
    		this.methodName = t.getMethodName();    		
    	}
    	
    	public String toString(){
    		String s;
    		if(this.label == null && this.value == null){
    			s = (new DecimalFormat("#0.000")).format(time) + " : "
						+ className + " " + methodName + "() - Line " + lineNumber
						+ "\t| " + msg;
    		} else {
    			s = (new DecimalFormat("#0.000")).format(time) + " : "
						+ className + " " + methodName + "() - Line " + lineNumber
						+ "\t| " + label + " :\t" + value;
    		}
    		return s;
    	}
    }
}

