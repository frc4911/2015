package org.usfirst.frc.team4911.robot.subsystems;

import java.util.Arrays;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.AnalogPotentiometer;

import org.usfirst.frc.team4911.robot.RobotConstants;
import org.usfirst.frc.team4911.robot.RobotMap;

import edu.wpi.first.wpilibj.CANTalon;

import com.kauailabs.nav6.frc.IMUAdvanced;

import ExternalLibs.LIDAR;

public class SensorSystem extends Subsystem {
    public static IMUAdvanced imu = RobotMap.imu;

    public static CANTalon left = RobotMap.leftFront;
    public static CANTalon right = RobotMap.rightFront;
	
    public static BuiltInAccelerometer accelerometer = RobotMap.accelerometer;
    public static Gyro gyro = RobotMap.gyro;
	
    public static LIDAR lidar = RobotMap.lidar;
	
    //public static AnalogPotentiometer clampPot = RobotMap.clampPot;
    //public static AnalogPotentiometer hookLiftPot = RobotMap.hookLiftPot;
    //public static AnalogPotentiometer containerLiftPot = RobotMap.containerLiftPot;
	
    public double startTime;
    public DataBuffer accelXBuffer;
    public DataBuffer accelYBuffer;
    int binNumber = 50;
	
	
    public SensorSystem(){
	gyro.setSensitivity(RobotConstants.GYRO_SENSITIVITY);
	gyro.initGyro();
    	startTime = Timer.getFPGATimestamp();
    	lidar.start();
    	
    	accelXBuffer = new DataBuffer(binNumber);
    	accelYBuffer = new DataBuffer(binNumber);    	
    }
	
    public void initDefaultCommand() {
    }
    
    /***************************************
     * IMU METHODS
     ***************************************/
    public void init(){
    	imu.initIMU();
    }
    public boolean isDoneCalibrating(){
    	return !imu.isCalibrating();
    }
    public void zeroYaw(){
    	imu.zeroYaw();
    	startTime = Timer.getFPGATimestamp();
    }
    
    public float getPitch(){
    	return imu.getPitch();
    }
    public float getRoll(){
    	return imu.getRoll();
    }
    public float getYaw(){
    	return imu.getYaw();
    	//return getYawWithCompensation();
    }
    public float getYawWithCompensation(){
    	Double ellapsedTime = Timer.getFPGATimestamp() - startTime;
    	return imu.getYaw() + (float)(RobotConstants.YAW_DRIFT_PER_TICK * ellapsedTime);   	
    }
    public float getTemp(){
    	return imu.getTempC();
    }
    public float getAccelX(){
    	return imu.getWorldLinearAccelX() * RobotConstants.SENSORSYSTEM_GRAVITATIONAL_ACCELERATION;
    }
    public float getAccelY(){
    	return imu.getWorldLinearAccelY() * RobotConstants.SENSORSYSTEM_GRAVITATIONAL_ACCELERATION;
    }
    public float getAccelZ(){
    	return imu.getWorldLinearAccelZ() * RobotConstants.SENSORSYSTEM_GRAVITATIONAL_ACCELERATION;
    }
    public float getCompass(){
    	return imu.getCompassHeading();
    }
    
    public double getBufferedAccelX(){
    	accelXBuffer.add(this.getAccelX());
    	return accelXBuffer.get();
    }
    public double getBufferedAccelY(){
    	accelYBuffer.add(this.getAccelY());
    	return accelYBuffer.get();
    }
    public void clearAccelBuffer(){
    	accelXBuffer = new DataBuffer(binNumber);
    	accelYBuffer = new DataBuffer(binNumber);
    }
    public String accelXBufferToString(){
    	return accelXBuffer.toString();
    }
    public String accelYBufferToString(){
    	return accelYBuffer.toString();
    }
    
    /***************************************
     * Accelerometer Methods
     ***************************************/
    public double getX(){
    	return accelerometer.getX();
    }
    public double getY(){
    	return accelerometer.getY();
    }
    public double getZ(){
    	return accelerometer.getZ();
    }
    
    /***************************************
     * Gyro Methods
     ***************************************/
    public double getAngle(){
    	return gyro.getAngle();
    }
    public double getRate(){
    	return gyro.getRate();
    }
    public void resetGyro(){
    	gyro.reset();
    }
    
    /***************************************
     * Potentiometer Methods
     ***************************************/
    public double getPot(){
    	return 0.0;
	//return clampPot.get();
    }
    
    /*public double getHookLiftPot() {
   	return hookLiftPot.get();
       }
       
       public double getContainerLiftPot() {
   	return containerLiftPot.get();
       }*/
    /***************************************
     * LIDAR Methods
     ***************************************/
    public void start() {
    	lidar.start();
    }
    
    public int getCM() {
    	return lidar.getDistance();
    }
    
    public double getIN() {
    	return ((double)lidar.getDistance() / (RobotConstants.inToCM));
    }
    
    public class DataBuffer{
    	private double[] buffer;
    	private int size;
    	private int currIndex;
    	
    	public DataBuffer(int size){
    	    this.size = size;
    	    this.buffer = new double[this.size];
    	    currIndex = 0;
    	}
    	public void add(double value){
    	    buffer[currIndex] = value;
    	    currIndex++;
    	    currIndex %= size;
    	}
    	public double get(){
    	    double temp = 0.0;
    	    for(double d : this.buffer){
    		temp += d;
    	    }
    	    temp /= this.size;
    	    return temp;
    	}	
    	public String toString(){
    	    return Arrays.toString(buffer);
    	}
    }
}

